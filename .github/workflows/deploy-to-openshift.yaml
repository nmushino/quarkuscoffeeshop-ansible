name: Deploy to OpenShift

on:
  workflow_dispatch:
    inputs:
      SKIP_TLS:
        description: 'Skip TLS verification'
        default: 'true'
        required: false
      ACM_WORKLOADS:
        description: 'Enable ACM Workloads'
        default: 'n'
        required: false
      AMQ_STREAMS:
        description: 'Enable AMQ Streams'
        default: 'y'
        required: false
      CONFIGURE_POSTGRES:
        description: 'Configure Postgres'
        default: 'y'
        required: false
      MONGODB_OPERATOR:
        description: 'Enable MongoDB Operator'
        default: 'n'
        required: false
      MONGODB:
        description: 'Enable MongoDB'
        default: 'n'
        required: false
      HELM_DEPLOYMENT:
        description: 'Enable Helm Deployment'
        default: 'y'
        required: false
      DELETE_DEPLOYMENT:
        description: 'Delete Deployment'
        default: 'false'
        required: false
      DEBUG:
        description: 'Debug Level'
        default: '-v'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install Ansible and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible

    - name: Set up OpenShift CLI
      run: |
        curl -OL https://raw.githubusercontent.com/tosin2013/openshift-4-deployment-notes/master/pre-steps/configure-openshift-packages.sh
        chmod +x configure-openshift-packages.sh
        export VERSION=latest-4.12
        ./configure-openshift-packages.sh -i

    - name: Log in to OpenShift cluster
      run: oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }} --insecure-skip-tls-verify=${{ github.event.inputs.SKIP_TLS }}
      env:
        OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}

    - name: Set environment variables
      run: |
        cat >source.env<<EOF
CLUSERTER_DOMAIN_NAME=${{ secrets.CLUSTER_DOMAIN_NAME }}
TOKEN=${{ secrets.OPENSHIFT_TOKEN }}
ACM_WORKLOADS=${{ github.event.inputs.ACM_WORKLOADS }}
AMQ_STREAMS=${{ github.event.inputs.AMQ_STREAMS }}
CONFIGURE_POSTGRES=${{ github.event.inputs.CONFIGURE_POSTGRES }}
HELM_DEPLOYMENT=${{ github.event.inputs.HELM_DEPLOYMENT }}
DELETE_DEPLOYMENT=${{ github.event.inputs.DELETE_DEPLOYMENT }}
MONGODB_OPERATOR=${{ github.event.inputs.MONGODB_OPERATOR }}
MONGODB=${{ github.event.inputs.MONGODB }}
DEBUG=${{ github.event.inputs.DEBUG }}
EOF

    - name: Deploy application
      run: |
        # Add your deployment commands here
        # For example, you might run a script or use oc commands to deploy your application
        echo "Deploying Quarkus Coffee Shop application"
        ls -lath source.env
        #./files/deploy-quarkuscoffeeshop-ansible.sh -d ${{ secrets.OPENSHIFT_SERVER }} -t ${{ secrets.OPENSHIFT_TOKEN }} -p 123456789 -s RALEIGH
      env:
        CLUSTER_DOMAIN_NAME: ${{ env.CLUSTER_DOMAIN_NAME }}
        TOKEN: ${{ env.TOKEN }}
        ACM_WORKLOADS: ${{ env.ACM_WORKLOADS }}
        AMQ_STREAMS: ${{ env.AMQ_STREAMS }}
        CONFIGURE_POSTGRES: ${{ env.CONFIGURE_POSTGRES }}
        MONGODB_OPERATOR: ${{ env.MONGODB_OPERATOR }}
        MONGODB: ${{ env.MONGODB }}
        HELM_DEPLOYMENT: ${{ env.HELM_DEPLOYMENT }}
        DELETE_DEPLOYMENT: ${{ env.DELETE_DEPLOYMENT }}
        DEBUG: ${{ env.DEBUG }}